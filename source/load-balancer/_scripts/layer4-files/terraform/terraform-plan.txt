$ terraform plan

  Refreshing Terraform state in-memory prior to plan...
  The refreshed state will be used to calculate this plan, but will not be
  persisted to local or remote state storage.


  ------------------------------------------------------------------------

  An execution plan has been generated and is shown below.
  Resource actions are indicated with the following symbols:
    + create

  Terraform will perform the following actions:

    # openstack_lb_listener_v2.listener_1 will be created
    + resource "openstack_lb_listener_v2" "listener_1" {
        + admin_state_up         = true
        + connection_limit       = (known after apply)
        + default_pool_id        = (known after apply)
        + id                     = (known after apply)
        + loadbalancer_id        = (known after apply)
        + name                   = "listener-1"
        + protocol               = "HTTP"
        + protocol_port          = 80
        + region                 = (known after apply)
        + tenant_id              = (known after apply)
        + timeout_client_data    = (known after apply)
        + timeout_member_connect = (known after apply)
        + timeout_member_data    = (known after apply)
        + timeout_tcp_inspect    = (known after apply)
      }

    # openstack_lb_loadbalancer_v2.terra_load_balancer will be created
    + resource "openstack_lb_loadbalancer_v2" "terra_load_balancer" {
        + admin_state_up        = true
        + id                    = (known after apply)
        + loadbalancer_provider = (known after apply)
        + name                  = "terraform-lb"
        + region                = (known after apply)
        + security_group_ids    = (known after apply)
        + tenant_id             = (known after apply)
        + vip_address           = (known after apply)
        + vip_network_id        = (known after apply)
        + vip_port_id           = (known after apply)
        + vip_subnet_id         = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
      }

    # openstack_lb_member_v2.member_1 will be created
    + resource "openstack_lb_member_v2" "member_1" {
        + address        = "XXXXXXXXXXXXXXX"
        + admin_state_up = true
        + id             = (known after apply)
        + name           = "member-1"
        + pool_id        = (known after apply)
        + protocol_port  = 80
        + region         = (known after apply)
        + tenant_id      = (known after apply)
        + weight         = (known after apply)
      }

    # openstack_lb_member_v2.member_2 will be created
    + resource "openstack_lb_member_v2" "member_2" {
        + address        = "XXXXXXXXXXXXXXX"
        + admin_state_up = true
        + id             = (known after apply)
        + name           = "member-2"
        + pool_id        = (known after apply)
        + protocol_port  = 80
        + region         = (known after apply)
        + tenant_id      = (known after apply)
        + weight         = (known after apply)
      }

    # openstack_lb_monitor_v2.monitor_1 will be created
    + resource "openstack_lb_monitor_v2" "monitor_1" {
        + admin_state_up   = true
        + delay            = 5
        + expected_codes   = "200"
        + http_method      = "GET"
        + id               = (known after apply)
        + max_retries      = 3
        + max_retries_down = (known after apply)
        + pool_id          = (known after apply)
        + region           = (known after apply)
        + tenant_id        = (known after apply)
        + timeout          = 15
        + type             = "HTTP"
        + url_path         = (known after apply)
      }

    # openstack_lb_pool_v2.pool_1 will be created
    + resource "openstack_lb_pool_v2" "pool_1" {
        + admin_state_up = true
        + id             = (known after apply)
        + lb_method      = "ROUND_ROBIN"
        + listener_id    = (known after apply)
        + name           = "webserver-pool"
        + protocol       = "HTTP"
        + region         = (known after apply)
        + tenant_id      = (known after apply)

        + persistence {
            + cookie_name = (known after apply)
            + type        = (known after apply)
          }
      }

    # openstack_networking_floatingip_associate_v2.fip_associate will be created
    + resource "openstack_networking_floatingip_associate_v2" "fip_associate" {
        + fixed_ip    = (known after apply)
        + floating_ip = (known after apply)
        + id          = (known after apply)
        + port_id     = (known after apply)
        + region      = (known after apply)
      }

    # openstack_networking_floatingip_v2.fip_1 will be created
    + resource "openstack_networking_floatingip_v2" "fip_1" {
        + address    = (known after apply)
        + all_tags   = (known after apply)
        + dns_domain = (known after apply)
        + dns_name   = (known after apply)
        + fixed_ip   = (known after apply)
        + id         = (known after apply)
        + pool       = "public-net"
        + port_id    = (known after apply)
        + region     = (known after apply)
        + tenant_id  = (known after apply)
      }

    # openstack_networking_secgroup_rule_v2.secgroup_rule_1 will be created
    + resource "openstack_networking_secgroup_rule_v2" "secgroup_rule_1" {
        + direction         = "ingress"
        + ethertype         = "IPv4"
        + id                = (known after apply)
        + port_range_max    = 80
        + port_range_min    = 80
        + protocol          = "tcp"
        + region            = (known after apply)
        + remote_group_id   = (known after apply)
        + remote_ip_prefix  = "XXXXXXXXXX"
        + security_group_id = (known after apply)
        + tenant_id         = (known after apply)
      }

    # openstack_networking_secgroup_v2.secgroup_1 will be created
    + resource "openstack_networking_secgroup_v2" "secgroup_1" {
        + all_tags    = (known after apply)
        + description = (known after apply)
        + id          = (known after apply)
        + name        = "secgroup_1"
        + region      = (known after apply)
        + tenant_id   = (known after apply)
      }

  Plan: 10 to add, 0 to change, 0 to destroy.

  ------------------------------------------------------------------------

  Note: You didn't specify an "-out" parameter to save this plan, so Terraform
  can't guarantee that exactly these actions will be performed if
  "terraform apply" is subsequently run.
